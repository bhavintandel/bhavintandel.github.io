## AVRO 

A schema in avro is represented as JSON by :
 1. JSON string
 2. JSON object
 3. JSON array (union of embedded types)

### Primitive types

 * null
 * boolean
 * int: 32-bit
 * long: 64-bit
 * float: 32-bit
 * double: 64-bit
 * string

### Complex types

 * Records: It consists of,
   * name:
   * namespace:
   * doc:
   * aliases:
   * fields :
     * name:
     * doc:
     * type:
     * default:
     * order:
     * aliases:
   Example
   ```
   {
    "type": "record",
    "name": "LongList",
    "aliases": ["LinkedLongs"],                      // old name for this
    "fields" : [
      {"name": "value", "type": "long"},             // each element has a long
      {"name": "next", "type": ["null", "LongList"]} // optional next element
    ]
   }
   ```

 * Enums:
   * name
   * aliases
   * symbols:
  Example
  ```
  { "type": "enum",
    "name": "Suit",
    "symbols" : ["SPADES", "HEARTS", "DIAMONDS", "CLUBS"]
  }
  ```  

 * Arrays:
   * items: schema of items in array
  Example
  `{"type": "array", "items": "string"}`

 * Maps:
   * values: schema of values
  Example
  `{"type": "map", "values": "long"}`

 * Unions

 * Fixed  


### Names

Record, enums and fixed are named types.


### Data Serialization

Avro data is always serialized with the schema. Files that is stored in avro format should include schema in the file.


### Encodings

Two encodigs: JSON, binary

 * Primitive Types:
   * null: 0 byte
   * boolean: single byte of 0 or 1
   * int and long: variable lenght zig-zag
   * float: 4 bytes
   * double: 8 bytes
   * bytes: long and then many bytes of data
   * string: long followed by UTF-8 encoding of data. For ex. "foo" will be long value 3 (06 hex), 'f', 'o', and 'o' (the hex bytes 66 6f 6f): 06 66 6f 6f
 
